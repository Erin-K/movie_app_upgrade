{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","components/Navigation.js","routes/Detail.js","App.js","serviceWorker.js","index.js"],"names":["About","Movie","id","year","title","summary","poster","genres","to","pathname","state","className","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","Component","Navigation","Detail","props","location","history","undefined","push","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAUeA,MARf,WACE,OACE,mF,8FCsCWC,MArCf,YAA4D,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAChD,OACE,kBAAC,IAAD,CAAMC,GAAI,CACRC,SAAS,UAAD,OAAYP,GACpBQ,MAAO,CACLR,GAAIA,EACJC,KAAMA,EACNC,QACAC,QAASA,EACTC,SACAC,YAGF,yBAAKI,UAAU,SACb,yBAAKC,IAAKN,EAAQO,IAAKT,IACvB,yBAAKO,UAAU,eACb,wBAAIA,UAAU,gBAAgBP,GAC9B,wBAAIO,UAAU,eAAeR,GAC7B,wBAAIQ,UAAU,kBACVJ,EAAOO,KAAI,SAACC,EAAOC,GAAR,OAAkB,wBAAIL,UAAU,gBAAgBM,IAAKD,GAAQD,OAE5E,uBAAGJ,UAAU,kBAAkBN,EAAQa,MAAM,EAAE,KAA/C,YCwBKC,E,2MA3CbT,MAAQ,CACNU,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAEiCC,IAAMC,IAAI,4DAF3C,gBAEcJ,EAFd,EAEFK,KAAQA,KAAQL,OAExBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAACR,OAAQA,EAAQD,WAAW,IALhC,2C,mFAQVU,KAAKR,c,+BAGG,IAAD,EACuBQ,KAAKpB,MAA3BU,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASV,UAAU,aAChBS,EACC,yBAAKT,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACbU,EAAOP,KAAI,SAAAiB,GAAK,OAChB,kBAAC,EAAD,CACEd,IAAKc,EAAM7B,GACXA,GAAI6B,EAAM7B,GACVC,KAAM4B,EAAM5B,KACZC,MAAO2B,EAAM3B,MACbC,QAAS0B,EAAM1B,QACfC,OAAQyB,EAAMC,mBACdzB,OAAQwB,EAAMxB,kB,GAlCT0B,aCKJC,MARf,WACE,OACE,6BACE,kBAAC,IAAD,CAAM1B,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCwBS2B,E,4LApBQ,IAAD,EACYL,KAAKM,MAA3BC,EADU,EACVA,SAAUC,EADA,EACAA,QAClBX,QAAQC,IAAIS,QACUE,GAAlBF,EAAS3B,OAEX4B,EAAQE,KAAK,O,+BAGP,IACAH,EAAaP,KAAKM,MAAlBC,SACR,OAAKA,EAAS3B,MAEV,8BAAO2B,EAAS3B,MAAMN,OAGjB,S,GAhBQ6B,aCQNQ,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWzB,IACxC,kBAAC,IAAD,CAAOuB,KAAK,SAASE,UAAW5C,IAChC,kBAAC,IAAD,CAAO0C,KAAK,aAAaE,UAAWT,MCDtBU,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.db16b149.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About() {\n  return (\n    <span>\n      Aoub this page: I built it because I love movie.\n    </span>\n  )\n}\n\nexport default About;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Movie.css';\n\nfunction Movie({id, year, title, summary, poster, genres}) {\n  return (\n    <Link to={{\n      pathname: `/movie/${id}`,\n      state: {\n        id: id,\n        year: year,\n        title,\n        summary: summary,\n        poster,\n        genres\n      }\n    }}>\n      <div className=\"movie\">\n        <img src={poster} alt={title} />\n        <div className=\"movie__data\">\n          <h3 className=\"movie__title\">{title}</h3>\n          <h5 className=\"movie__year\">{year}</h5>\n          <ul className=\"movie__generes\">\n            { genres.map((genre, index) => <li className=\"genres__genre\" key={index}>{genre}</li> )}\n          </ul>\n          <p className=\"movie__summary\">{summary.slice(0,140)} ...</p>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './Home.css';\nimport Movie from '../components/Movie'\n\nclass Home extends Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    // const movies = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n    const { data: { data: { movies }}} = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n    // == console.log(movies.data.data.movies);\n    console.log(movies)\n    this.setState({movies: movies, isLoading: false})\n  }\n  componentDidMount() {\n    this.getMovies();\n\n  };\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ?\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n          :\n          <div className=\"movies\">\n           {movies.map(movie => \n            <Movie\n              key={movie.id}\n              id={movie.id}\n              year={movie.year}\n              title={movie.title}\n              summary={movie.summary}\n              poster={movie.medium_cover_image}\n              genres={movie.genres}\n            />\n            )}\n          </div> \n        }\n      </section>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Navigation() {\n  return (\n    <div>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n    </div>\n  )\n}   \nexport default Navigation;","import React, { Component } from 'react';\n\n// function Detail({location}) {\n//   // console.log(props)\n//   console.log(location)\n//   return (\n//     <span>hello</span>\n//   );\n// }\n\nclass Detail extends Component {\n  componentDidMount() {\n    const { location, history } = this.props;\n    console.log(location)\n    if (location.state == undefined) { // 해당 페이지에서 새로고침할 경우 undefined가 나옴\n      //console.log(this.props) // history.goBack()\n      history.push('/'); // redirect\n    }\n  }\n  render() {\n    const { location } = this.props;\n    if ( location.state ) {\n      return (\n        <span>{location.state.title}</span>\n      )\n    } else {\n      return null;\n    }\n  }\n} \n\nexport default Detail;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport About from './routes/About';\nimport Home from './routes/Home';\nimport Navigation from './components/Navigation';\nimport Detail from './routes/Detail';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}